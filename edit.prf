.he //Glaschick's Editor/PC-DOS/
.fo //Version 4.16/Seite #/

.de VL
.nr i $1
.in +$1
.en
.de LI
.ti -@ni
$1
.en
.de LE
.in -@ni
.en

.na
.nf
.ce on
.sp 5
Kurze Bedienungsanleitung
-------------------------

Screen-Editor   --  MS-DOS Version
.sp 3
.ce off
.fi
Der Editor liest die zu bearbeitende Datei in den Arbeitsspeicher;
sie wird erst durch ein Kommando auf Platte gespeichert.
Stromausfall o.ä.  vernichtet also die Änderungen seit dem
letzten Retten (s. "save").
.br
Bei Ende oder Save wird die alte Datei in eine Backup-Datei
umbenannt und dann die neue angelegt und beschrieben. Die Backup-Datei
wird gewonnen, indem vor den Dateinamen ein $$ gesetzt wird.

Aufruf durch
   edit datei.ext

Der Editor schaltet auf die Bildschirm-Seite 1 und am Ende zurück auf
die Original-Seite.
[DOS only:]
Mit der Funktionstaste F2 kann die
ursprüngliche Seite angeschaut werden, z.B. die Fehlermeldungen
einen Compilers. Nochmal F2 führt zurück in den Editor.

Falls eine Hercules- oder MDA-Karte benutzt wird, ist keine zweite
Seite vorhanden; also wird nicht umgeschaltet. Das gleiche gilt,
wenn die Version mit ANSI-Steuerzeichen, z.B. für PWS, benutzt wird.

Nach dem Aufruf wird in der letzten Zeile angezeigt
.ti 5
edit r.v [dateiname] zeile

Falls die Datei noch nicht existiert, wird die Nachricht
.ti 5
   File xxxxxxx.yyy not found.
.br
ausgegeben. Die Datei wird nur dann angelegt, wenn eine
Zeile erzeugt wurde.

Es werden die ersten 24 Zeilen angezeigt.
Dabei wird in der ersten Spalte ein senkrechter Strich angezeigt.
Danach kommt eine Trennspalte, dann kommen die ersten 78 Zeichen
jeder Zeile.
Eingefuegte Zeilen erhalten eine Doppelstrich;
Platzhalter-Zeilen ein leichtes Punktmuster in der ersten Spalte.

Außerhalb von PC-DOS wird statt des Doppelstrichs ein Quote und
statt des Punktmusters ein Größer-Zeichen verwendent.

Der Cursor kann mit den vier Pfeil-Tasten im numerischen Feld frei
bewegt werden. Dabei wird von der letzten in die erste Zeile bzw.
Spalte gegeangen und umgekehrt. Es wird also kein Rollen durchgeführt.

Die "BS"-Taste (Pfeil nach links über der CR-Taste) macht eingegebene
Änderungen rückgängig, indem sie ein Zeichen nach links geht und
das dortige Zeichen durch dasjenige ersetzt, was bei Betreten der
Zeile dort stand.

Die Wagen-Rücklauf-Taste ("Carriage Return") positioniert in der
nächsten Zeile wie folgt:
.in +3
.ti -3
-  auf das erste nicht-leere Zeichen, wenn es eins gibt.
.ti -3
-  Ist die Zeile leer, auf die Spalte des ersten nicht-leeren
Zeichens der Zeile davor, sofern dieses existiert.
.ti -3
-  auf die erste Spalte sonst.
.in -3

Die Tasten "Pg Up" und "Pg Dn" verschieben das Sichtfenster, so dass
die letzte bzw. erste Zeile die erste bzw. letzte auf dem Schirm wird.
F8 und F10 verschieben um ein halbes Sichtfenster.

Die Taste "Home" positioniert auf die erste angezeigte Zeile.

Die Taste "End" positioniert hinter die letzte Spalte der Zeile.

Funktionstasten:
.in 2
.VL 3
.LI F1
nicht belegt, reserviert für Help.

.LI F2
Umschaltung auf MS-DOS Bildschirmseite und zurück

.LI F3
Sichtfenster nach rechts verschieben.

.LI F4
Sichtfenster nach links verschieben.

.LI F5
"Here"-Funktion: die aktuelle Zeile wird die erste
auf dem Schirm.

.LI F6
Prefix-Taste zum Eingeben von Steuerzeichen.

.LI F7
Rückwärts suchen.

.LI F8
Rückwärts halb blättern.

.LI F9
Vorwärts suchen.

.LI F10
Vorwärts halb blättern.
.LE
.ne 10
.nf
.ce on
.sp 3
Löschen und Einfügen:
---------------------
.fi
.ce off
.sp 2
Mit der "Del"-Taste wird das aktuelle Zeichen entfernt und die weiter
links stehenden Zeichen nachgezogen.

Mit der "Ins"-Taste wird auf Einfügen umgeschaltet; es erscheint
INSERT in der letzten Zeile.  Zeichen werden an der aktuellen
Position eingefügt, der Cursor um ein Zeichen nach rechts gesetzt.
Ist die Zeile zu lang, so gehen die
letzten Zeichen der Zeile geht verloren.
Ausschalten durch nochmaliges Betätigen der "Ins"-Taste oder
Verlassen der Zeile. (Der INSERT-Modus ist also recht flüchtig.)

Die "Tab"- und "BTab"-Tasten (Pfeil nach rechts bzw. links mit
senkrechtem Strich an der Pfeilspitze) positionieren auf die
Spalten 1, 9, 17 usw., also auf Tabulatoren im 8-er Raster.
Enthält die erste Zeile der Datei ab Spalte 10 START,
so werden die Tabulatoren auf 1, 10, 16, 36 und 71 gesetzt
(Assembler der 8864).

Am Dateiende kann einfach eingegeben werden, die Zeilen werden
jeweils eingerichtet, wie man an der Zeilennummer erkennen kann,
die dann erscheint.

Alle übrigen Funktionen werden durch die "Esc"-Taste angewählt.
Damit geht der Cursor in derselben Zeile ganz nach links.
Jetzt kann ein Kommando eingegeben werden:
(z.Z. bestimmt der erste Buchstabe das Kommando;
ist das Kommando länger als 2 Zeichen, wird einfach über den Text
geschrieben, ohne daß der Text verändert wird.)
.VL 4
.LI 1234
.br
Wird eine Zahl eingegeben, so wird auf diese Zeile
positioniert.
Wenn es die Zeile nicht gibt, so wird auf die Zeile
davor positioniert.
Die so ausgewählte Zeile wird die erste Zeile im
Sichtfenster.

.LI end
.br
Ende der Bearbeitung.
.br
Wurden Änderungen angebracht, so wird die Datei zurück-
geschrieben.
Es wird eine Backup-Datei angelegt.
Beim Abspeichern werden führende Blanks soweit möglich
durch Tabulator-Zeichen ersetzt. Nach dem Editieren einer
Datei sind Tabulatoren nur noch am Anfang einer Zeile vorhanden.
Außerdem werden Blanks am Zeilenende entfernt, so daß in der
Datei hinterher am Zeilenende stets Nicht-Blanks sind.

.LI save
.br
Der aktuelle Stand wird geschrieben, aber das Editieren
kann fortgesetzt werden.

.LI quit
.br
Die Bearbeitung wird beendet, ohne dass die Aenderungen
zurückgeschrieben werden.
Wurden Aenderungen gemacht, so wird vorsichtshalber mit
"Abort ?" eine Bestätigung verlangt.

.LI find
.br
In der Statuszeile wird eine Zeichenkette erfragt.
Die Zeichenkette des vorigen Suchens wird angezeigt.
Wird mit ESC ausgelöst, so wird nicht gesucht.
Wird auf der ersten Zeicheposition des Suchstrings
ausgelöst (also ohne Änderungen), so wird nochmal
nach derselben Zeichenkette gesucht.
Ansonsten zählt die Zeichenkette immer nur bis zur
Cursorposition.
In der aktuellen Zeile wird nie gesucht.
Auslösen mit F8 sucht rückwärts,
mit CR oder F10 vorwärts.

.LI k (wie cut oder split)
.br
Die Zeile wird vor dem Cursor zerteilt und der Rest
der Zeile gibt eine neue, eingefügte Zeile.

.LI join
.br
Die folgende Zeile wird an die aktuelle Zeile angehängt
und danach gelöscht.

.LI read
.br
In der Statuszeile wird ein Dateiname wie bei "find"
erfragt. Die Datei wird vollständig hinter die aktuelle
Zeile eingelesen.

.LI dnn
.br
Der Buchstabe "d" gefolgt von einer Zahl löscht ab der
aktuellen Zeile ebensoviele Zeilen.
Folgt keine Zahl, so wird eine Zeile gelöscht.

.LI inn
.br
Der Buchstabe "i" gefolgt von einer Zahl fügt
hinter der aktuellen Zeile, maximal bis
Schirmende, leere Platzhalter-Zeilen ein. Ohne Zahl wird
eine Zeile eingefügt. Die Platzhalter-Zeilen werden ein-
gefügt, wenn sie benutzt sind. Sie erhalten dann
Bruchnummern. Platzhalter-Zeilen haben keinen senkrechten
Strich in der ersten Spalte des Bildschirms und als Zeilennummer
die Nummer des letzten Platzhalters davor mit angehängtem '+'.
Drei eingefügte Zeilen nach der 43. erhalten so die Nummern
43.1, 43.2 und 43.3. Die ursprüngliche Benummerung wird
also beibehalten. Wird zwischen einfügte Zeilen eingefügt,
so werden die Bruchteile renummeriert, soweit notwendig.
Da in der Datei auf Platte keine Zeilennummern geführt werden,
sondern die links angezeigten Zeilennummern einfach die Nummern
der Zeilen sind, wirkt Abspeichern und neu Editieren wie
komplett renummerieren.

.LI onn
.br
o funktioniert wie insert, nur daß vor der aktuellen Zeile
Platz frei gemacht wird.

.LI tnn
.br
"t" gefolgt von einer Zahl invertiert den Tabulator in der
entsprechenden Spalte.

.LI *
.br
Wirkt wie "Here"

.LI +
.br
Wirkt wie "Pg Dn"

.LI -
.br
Wirkt wie "Pg Up"

.LE
.ne 10
.ce on
.nf
Blockkommandos
--------------
.fi
.ce off
.sp 3

Um das lästige und fehleranfällige Abzählen von Zeilen zu vermeiden,
kann der zu bearbeitende Teil in Blockkommandos eingefasst werden.
Dazu wird der Kommandobuchstabe verdoppelt.

Beispiel:
.in 3
In Zeile 5 und Zeile 9 wird (durch ESC) in dem Zeilennummernfeld
"dd" eingegeben. Mit der zweiten Eingabe von "dd" werden die
Zeilen 5 bis 9 gelöscht.
.in -3

Der aktuelle Zustand der Zeilenkommandos wird in der Statuszeile
notiert. Ein angefangenes Zeilenkommando wird durch ein Blank in
der Zeilennummer gelöscht.

Es gibt folgende Zeilenkommandos:

dd   Löschen

mm   Move, d.h. kopieren mit löschen

cc   Copy, also kopieren

vv   Vary, also ersetzen

Für Move und Copy muss zusätzlich noch die Stelle markiert werden,
an die kopiert werden soll.
Dies geschieht durch die Zeilenkommandos

a   after

b   before


Bei Move und Copy kann analog zu Delete auch eine Zahlenangabe
benutzt werden, so dass "m3" die bezogene und die beiden nachfolgenden
Zeilen verschiebt.

Damit bei Blockkommandos besser positioniert werden kann, bleiben die
Cursortasten im Zeilennummernfeld. Nur CR geht zurück zum Editieren
des Textes.

.bp
.de VER
.sp
.nf
.in +10
Version $1:
============
.in -10
.fi
.sp
.en


.VER 2.3
.VL 2
.LI -
Steuerzeichen: Werden beim Ausgeben invertiert dargestellt,
z.B. CTL-L durch ein invertiertes L.
Sie können mit F6 als Präfix-Taste auch eingegeben werden.
.LE

.VER 3.0
.VL 2

.LI -
Find-Kommando: ESC-f gibt eine Anfrage nach der zu suchenden
Zeichenkette in der Statuszeile. CR und F9 suchen vorwärts,
F7 sucht rückwärts. Die aktuelle Zeile wird nicht betrachtet.
F7 und F9 können dann zum Weitersuchen ohne ESC in die
Zeilennummern verwendet werden, wenn sich der Suchtext nicht
ändert.
.LE

.VER 3.6
.VL 2

.LI -
Zeilen länger als 72 Zeichen können jetzt behandelt werden.
Zum einen geht keine Information mehr verloren;
zum anderen kann mit F3 und F4 oder CTL-links und CTL-rechts
das Sichtfenster verschoben werden.

.LI -
DD oder MM in der letzten Zeile führt nicht mehr zur
zur Endlosschleife.
.LE

.VER 3.7
.VL 2
.LI -
Tabulatoren mit t-Kommando invertierbar.
.br
Wenn START in Spalte 10, 886x Assembler Tabulatoren.
.br
Spaltenlineal in der Kommandozeile.

.LI -
r-Kommando zum Einfügen einer Datei hinter der
aktuellen Zeile.

.LI -
F2 zum Schalten auf MS-DOS Seite

.LE
.VER 4.0
.VL 2
.LI -
Es wird nicht mehr die Zeilennummer jeder Zeile vorangestellt,
sondern sie erscheint nur noch am Ende der Kommandozeile.
Damit sind jetzt 78 Spalten editierbar, weil in den ersten beiden
Spalten ein senkrechter Strich die Zeilen markiert, die keine
Platzhalter sind.

.LE
.VER 4.3
.VL 2
.LI -
Fehler beseitigt: Nach Read wurde das Update-Flag nicht gesetzt.

.LI -
Fehler beseitigt: Im Screen-Mode 7 (MDA) wird keine Seitenumschaltung
mehr vorgenommen.

.LE
.VER 4.7
.VL 2
.LI -
Backup-Namen verändert; es wird nur noch umbenannt und dann neu
geschrieben.

.LI -
split und join.

.LI -
open als Ergänzung zu insert für die Benutzer des RAND-Editors.

.LE
.VER 4.15
.VL 2
.LI -
Vary-Kommando zum Ersetzen von mit Find gesuchten Zeichenketten

.LE
.VER 4.16
.VL 2
.LI -
Taste END positioniert an das Zeilenende

.VER 4.20
.VL 2
.LI -
Fehler im Find, Vary repariert:
Adressfehler nach Ersetzen, Suchen ein Zeichen zu kurz, ...

Anpassung auf TCC

Neuer Parameter +nn: positioniert auf Zeile

Modulus für Zeilenberechnung durch Rechenmakros ersetzt

.LE
.sp 5
.ne 10
.ce on
.nf
noch vorhandene Fehler oder Probleme:
=====================================
.fi
.ce off

Vor der 1. Zeile kann nicht eingefügt werden; dazu muß die
1. Zeile hinter sich kopiert werden und dann als neue Zeile
beschrieben werden.

CTL-C ist nicht abgefangen (insb. bei BREAK ON).
Sollte nicht verwendet werden, da die Seitenumschaltung
zurück dann nicht erfolgt.

5stellige oder längere Zeilennummern führen zur Positionierung
auf die erste statt die letzte Zeile.

.sp 5
.ne 10
.ce on
.nf
Beabsichtigte Erweiterungen:
============================
.fi
.ce off
Links-/Rechts-Schieben sollte die Cursorspalte verschieben
und nicht nur +/- 16 schieben

TERMCAP und CURSES verwenden

Virtuellen Line/Edit verwenden, der nur die geaenderten Zeilen speichert und
ansonsten nur die Position im Input-File; damit koennen dann laengere
Dateien verarbeitet werden. Auch kann gleich nach dem Anfangs-Bildschirm
begonnen werden, weil nicht gewartet werden muss, bis die ganze Datei
eingelesen wurde. Parallelarbeit waere wuenschenwert, aber nicht
unbedingt noetig.
Damit koennte dann auch STDIN verwendet werden und gv als viewer guenstig
sein.

>>, <<  Blockkommandos zum Ein- und Ausrücken

WRITE-Kommando zum Wegschreiben eines Teils

Rest einer Zeile löschen.
(mit split und delete zu erreichen)

Print als Block-Kommando

